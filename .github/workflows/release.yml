name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: build ${{ matrix.target.os }} (${{ matrix.target.triple }})
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - { os: macos-latest, triple: aarch64-apple-darwin, ext: "", archive: tar.gz }
          - { os: macos-latest, triple: x86_64-apple-darwin, ext: "", archive: tar.gz }
          - { os: ubuntu-latest, triple: x86_64-unknown-linux-gnu, ext: "", archive: tar.gz }
          - { os: ubuntu-latest, triple: aarch64-unknown-linux-gnu, ext: "", archive: tar.gz }
          - { os: windows-latest, triple: x86_64-pc-windows-msvc, ext: ".exe", archive: zip }
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target.triple }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install aarch64 Linux linker
        if: runner.os == 'Linux' && matrix.target.triple == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build (release)
        run: |
          cargo build --release --target ${{ matrix.target.triple }}
      
      - name: Prepare dist
        shell: bash
        run: |
          set -eux
          BIN_NAME="s3-cli"
          TARGET="${{ matrix.target.triple }}"
          OUT="target/${TARGET}/release/${BIN_NAME}${{ matrix.target.ext }}"

          # Strip symbols when possible
          case "${{ runner.os }}" in
            Linux)  strip "$OUT" || true ;;
            macOS)  strip -x "$OUT" || true ;;
          esac

          # Create packaging directory
          mkdir -p dist
          PKG="${BIN_NAME}-${TARGET}"
          mkdir -p "dist/${PKG}"
          cp "$OUT" "dist/${PKG}/"

          # Include helpful files
          if [ -f README.md ]; then cp README.md "dist/${PKG}/"; fi
          if [ -f LICENSE* ]; then cp LICENSE* "dist/${PKG}/" || true; fi

          # Archive
          if [ "${{ matrix.target.archive }}" = "zip" ]; then
            (cd dist && zip -r "${PKG}.zip" "${PKG}")
          else
            (cd dist && tar -czf "${PKG}.tar.gz" "${PKG}")
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.triple }}
          path: |
            dist/*.zip
            dist/*.tar.gz

  macos-universal:
    name: make macOS universal
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Build universal
        run: |
          set -eux
          BIN="s3-cli"
          mkdir -p dist/universal
          # extract both macOS archives into temp dirs
          mkdir -p tmp/arm tmp/x86
          tar -xzf artifacts/aarch64-apple-darwin/*.tar.gz -C tmp/arm
          tar -xzf artifacts/x86_64-apple-darwin/*.tar.gz -C tmp/x86
          ARM_BIN=$(find tmp/arm -type f -name "${BIN}")
          X86_BIN=$(find tmp/x86 -type f -name "${BIN}")
          lipo -create "$ARM_BIN" "$X86_BIN" -output "dist/universal/${BIN}"
          strip -x "dist/universal/${BIN}" || true
          (cd dist && tar -czf "${BIN}-universal-apple-darwin.tar.gz" universal)
      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: universal-apple-darwin
          path: dist/*universal*.tar.gz

  release:
    name: publish release
    needs: [build, macos-universal]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Gather files
        run: |
          mkdir -p dist
          cp artifacts/*/* . -r || true
          # Flatten to dist/
          find artifacts -type f -name "*.zip" -exec cp {} dist/ \;
          find artifacts -type f -name "*.tar.gz" -exec cp {} dist/ \;
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  crate-publish:
    name: publish crate to crates.io
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Verify tag matches Cargo.toml version
        run: |
          TAG="${GITHUB_REF#refs/tags/v}"
          FILE_VER=$(cargo metadata --no-deps --format-version=1 \
                      | jq -r '.packages[0].version')
          if [ "$TAG" != "$FILE_VER" ]; then
            echo "Tag v$TAG does not match Cargo.toml version $FILE_VER"
            exit 1
          fi

      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: cargo publish --locked